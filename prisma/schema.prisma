generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  password            String
  restaurantName      String
  createdAt           DateTime             @default(now())
  cnpj                String?
  cpf                 String
  ownersName          String
  phoneNumber         String
  refreshToken        String?
  store               Store?
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Store {
  id             Int            @id @default(autoincrement())
  userId         Int            @unique
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  logoUrl        String?
  bannerUrl      String?
  address        String? // Novo campo
  restaurantName String? // Cópia de User.restaurantName
  phoneNumber    String? // Cópia de User.phoneNumber
  openingHours   OpeningHour[]
  style          StoreStyle?
  createdAt      DateTime       @default(now())
  MenuCategory   MenuCategory[]

  @@map("stores")
}

model StoreStyle {
  id              Int    @id @default(autoincrement())
  primaryColor    String @default("#4F46E5")
  backgroundColor String @default("#FFFFFF")
  textColor       String @default("#1F2937")
  textButtonColor String @default("#FFFFFF")
  storeId         Int    @unique
  store           Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_styles")
}

model OpeningHour {
  storeId    Int
  store      Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  day        WeekDay
  isOpen     Boolean @default(false)
  timeRanges Json?

  @@id([storeId, day])
  @@map("opening_hours")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model MenuCategory {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  storeId   Int
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  menuItems MenuItem[]

  @@map("menu_category")
}

model MenuItem {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(150)
  description  String?
  price        Decimal?     @db.Decimal(10, 2)
  photoUrl     String?
  categoryId   Int
  menuCategory MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("menu_item")
}

enum WeekDay {
  segunda
  terca
  quarta
  quinta
  sexta
  sabado
  domingo
}
