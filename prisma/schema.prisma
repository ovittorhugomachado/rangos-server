generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String
  restaurantName    String
  accountStatus     AccountStatus       @default(ACTIVE)
  plan              PlanType            @default(PROFESSIONAL)
  createdAt         DateTime            @default(now())
  cnpj              String?
  cpf               String
  ownersName        String
  phoneNumber       String

  PasswordResetToken PasswordResetToken[]
  userPreference     UserPreference?
  openingHours       OpeningHour[]

  @@map("users")
}

model UserPreference {
  id               Int     @id @default(autoincrement())
  primaryColor     String
  backgroundColor  String
  textColor        String
  textButtonColor  String
  logoUrl          String
  bannerUrl        String
  userId           Int     @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model OpeningHour {
  id        Int     @id @default(autoincrement())
  day       WeekDay
  open      String  // Consider usar Time se suportado e desejado
  close     String
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("opening_hours")
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())  
  token      String   @unique                       
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@map("password_reset_tokens")
}

model MenuCategory {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  menuItems  MenuItem[]

  @@map("menu_category")
}

model MenuItem {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(150)
  description    String?
  price          Decimal?     @db.Decimal(10, 2)
  photoUrl       String?
  categoryId     Int
  menuCategory   MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("menu_item")
}

enum WeekDay {
  segunda
  terca
  quarta
  quinta
  sexta
  sabado
  domingo
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  OVERDUE
}

enum PlanType {
  PROFESSIONAL
  PROFESSIONAL_MORE_GPT
}