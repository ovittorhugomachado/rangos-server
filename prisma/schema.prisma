generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  restaurantName String
  accountStatus  AccountStatus @default(ACTIVE)
  plan           PlanType      @default(PROFESSIONAL)
  createdAt      DateTime      @default(now())
  cnpj           String?
  cpf            String
  ownersName     String
  phoneNumber    String

  PasswordResetToken PasswordResetToken[]
  userPreference     UserPreference?

  @@map("users")
}

model UserPreference {
  id             Int    @id @default(autoincrement())
  primaryColor   String
  secondaryColor String
  backgroundColor String
  logoUrl        String
  bannerUrl      String
  userId         Int    @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())  
  token     String   @unique                       
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model MenuCategory {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  menu_item MenuItem[]

  @@map("menu_category")
}

model MenuItem {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(150)
  description   String?
  price         Decimal?     @db.Decimal(10, 2)
  photo_url     String?
  category_id   Int
  menu_category MenuCategory @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("menu_item")
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  OVERDUE
}

enum PlanType {
  PROFESSIONAL
  PROFESSIONAL_MORE_GPT
}
