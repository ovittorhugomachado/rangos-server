openapi: 3.0.0
info:
  title: Rangos API
  version: 1.0.0
  description: API REST para gestão de pedidos e cardápios de restaurantes.
  contact:
    email: ovitorhugoalvesmachado@gmail.com.br
  license:
    name: Vitor Hugo Alves Machado

servers:
  - url: http://localhost:3000
    description: Local development

tags:
  - name: Auth
  - name: Password
  - name: Uploads
  - name: User
  - name: Store
  - name: Schedules
  - name: Categories
  - name: Menu Items
  - name: Orders

paths:

  /signup:
    post:
      tags:
        - Auth
      summary: Criar conta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantName:
                  type: string
                  example: "Meu Restaurante"
                cnpj:
                  type: string
                  example: "12.345.678/0001-99"
                  description: CNPJ no formato XX.XXX.XXX/XXXX-XX
                ownersName:
                  type: string
                  example: "Fulano da Silva"
                cpf:
                  type: string
                  example: "123.456.789-09"
                  description: CPF no formato XXX.XXX.XXX-XX
                phoneNumber: 
                  type: string
                  example: "(51) 98765-4321"
                  description: Telefone com DDD
                email:
                  type: string
                  format: email
                  example: "contato@meurestaurante.com.br"
                password:
                  type: string
                  example: senhaForte123
                  description: >
                    A senha deve ter entre 8 e 72 caracteres, conter pelo menos uma letra maiúscula e um número.
              required: [email, password, restaurantName, ownersName, cpf, phoneNumber]
      responses:
        '201':
          description: Usuário criado com sucesso
        '409':
          description: Email já cadastrado
        '422':
          description: Erro de validação de campos
        '500':
          description: Erro interno no servidor

  /login:
    post:
      tags:
        - Auth
      summary: Entrar na conta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "contato@meurestaurante.com.br"
                password:
                  type: string
                  example: senhaForte123
              required: [email, password]
      responses:
        '200':
          description: Login realizado com sucesso
          headers:
            Set-Cookie:
              description: Cookies de autenticação definidos (token e refreshToken)
              schema:
                type: string
              example: token=abc123; Path=/; HttpOnly; Max-Age=900
        '400':
          description: Erro de validação de campos
        '401':
          description: Credenciais inválidas
        '500':
          description: Erro interno no servidor

  /refresh-token:
    post:
      tags:
        - Auth
      summary: Atualizar token de acesso
      description: >
        Essa rota exige o cookie `refreshToken` presente na requisição. Ela retorna um novo access token no cookie `token`.
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
          description: Token de atualização armazenado em cookie.
      responses:
        '200':
          description: Token renovado com sucesso
        '401':
          description: Token de atualização ausente ou inválido
        '500':
          description: Erro interno no servidor

  /logout:
    post:
      tags:
        - Auth
      summary: Sair da conta
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie ou header para remover sessão.
      responses:
        '200':
          description: Logout efetuado com sucesso
        '401':
          description: Usuário não autenticado
        '500':
          description: Erro interno no servidor

  /recover-password: 
    post: 
      tags:
        - Password
      summary: Enviar link de alteração de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Link enviado com sucesso
        '404':
          description: Usuário não encontrado

  /validate-token/{token}:
    get:
      tags:
        - Password
      summary: Valida um token para criação de nova senha
      description: Verifica se um token é válido e não expirado
      parameters:
        - name: token
          in: path
          required: true
          description: Token a ser validado
          schema:
            type: string
      responses:
        '200':
          description: Token válido
        '404':
          description: Token inválido ou expirado
        '500':
          description: Erro interno do servidor

  /create-new-password/{token}:
    patch:
      tags:
        - Password
      summary: Criar nova senha
      description: >
        Cria uma nova senha usando um token de redefinição válido.
        O token é geralmente enviado por email após solicitação de redefinição.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token de redefinição de senha (JWT ou token único)
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 72
                  example: novaSenhaSegura123
                  description: >
                    A senha deve ter entre 8 e 72 caracteres, conter pelo menos uma letra maiúscula e um número.           
              required:
                - newPassword
      responses:
        '200':
          description: Senha redefinida com sucesso
        '404':
          description: Token inválido ou expirado
        '422':
          description: Senha fraca
        '500':
          description: Erro interno no servidor  
          
  /logo:
    patch:
      tags:
        - Uploads
      summary: Atualiza a logo da loja
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Logo atualizada com sucesso
        '400':
          description: Erro no processamento do arquivo
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor
          
  /banner:
    patch:
      tags:
        - Uploads
      summary: Atualiza a imagem do banner da loja
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                banner:
                  type: string
                  format: binary
      responses:
        '200':
          description: Banner atualizado com sucesso
        '400':
          description: Erro no processamento do arquivo
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor
        
  /{categoryId}/{menuItemId}:
    patch:
      tags:
        - Uploads
      summary: Atualiza a imagem de um produto selecionado pelos parâmetros
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
          description: ID da categoria do item
        - in: path
          name: menuItemId
          required: true
          schema:
            type: integer
          description: ID do item do menu
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                menu-item:
                  type: string
                  format: binary
      responses:
        '200':
          description: Banner atualizado com sucesso
        '400':
          description: Erro no processamento do arquivo
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor
        
  /user:
    get:
      tags:
        - User
      summary: Busca os dados do usuário
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para retornar os dados.
      responses:
        '200':
          description: Retorna um objeto com os dados do usuário
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor
          
    patch:
      tags:
        - User
      summary: Atualiza os dados do usuário
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para atualizar os dados.
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                restaurantName:
                  type: string
                  example: "Nome atualizado"
                cnpj:
                  type: string
                  example: "12.345.678/0001-99"
                  description: CNPJ no formato XX.XXX.XXX/XXXX-XX
                ownersName:
                  type: string
                  example: "Nome atualizado"
                cpf:
                  type: string
                  example: "123.456.789-09"
                  description: CPF no formato XXX.XXX.XXX-XX
                phoneNumber: 
                  type: string
                  example: "(51) 98765-4321"
                  description: Telefone com DDD
                email:
                  type: string
                  format: email
                  example: "novoEmail@meurestaurante.com.br"
      responses:
        '200':
          description: Dados atualizados com sucesso
        '400':
          description: Dados inválidos
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor
          
    delete:
      tags:
        - User
      summary: Deletar registro do usuário
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para deletar o usuário logado.
      responses:
        '200':
          description: Usuário deletado com sucesso
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor

  /stores/list:
    get:
      tags:
        - Store
      summary: Lista as lojas cadastradas
      description: Requer um access token válido no cookie para retornar a lista de lojas.
      responses:
        '200':
          description: Retorna uma lista de objetos com os dados das lojas
        '500':
          description: Erro interno no servidor 

  /store/{id}:
    get:
      tags:
        - Store
      summary: Busca os dados de uma loja específica
      description: Requer um parâmetro que é o id da loja para retornar os dados.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Id da loja a ser buscada
      responses:
        '200':
          description: Retorna um objeto com os dados da loja
        '404':
          description: loja não encontrada
        '500':
          description: Erro interno no servidor

  /store/style/{id}:
    get:
      tags:
        - Store
      summary: Busca os estilos da loja
      description: Requer um parâmetro que é o id da loja para retornar os dados.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Id da loja a ser buscada
      responses:
        '200':
          description: Retorna um objeto com os estilos da loja
        '404':
          description: loja não encontrada
        '500':
          description: Erro interno no servidor

  /my-store:
    get:
      tags:
        - Store
      summary: Busca os dados da loja
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para retornar os dados.
      responses:
        '200':
          description: Retorna um objeto com os dados da loja
        '404':
          description: loja não encontrada
        '500':
          description: Erro interno no servidor
          
    patch:
      tags:
        - Store
      summary: Atualiza os dados da loja
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para atualizar os dados.
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                restaurantName:
                  type: string
                  example: "Nome atualizado"
                phoneNumber: 
                  type: string
                  example: "(51) 98765-4321"
                address:
                  type: string
                  example: "Rua A"
                delivery:
                  type: boolean
                pickup:
                  type: boolean
      responses:
        '200':
          description: Dados atualizados com sucesso
        '400':
          description: Dados inválidos
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor

  /my-store/style:
    get:
      tags:
        - Store
      summary: Busca os estilos da loja
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para retornar os estilos.
      responses:
        '200':
          description: Retorna um objeto com os estilos da loja
        '404':
          description: loja não encontrada
        '500':
          description: Erro interno no servidor
    
    patch:
      tags:
        - Store
      summary: Atualiza os estilos da loja
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para atualizar os estilos.
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                primaryColor:
                  type: string
                  example: "#FF5733"
                backgroundColor:
                  type: string
                  example: "white"
                textButtonColor:
                  type: string
                  example: "black"
      responses:
        '200':
          description: Estilos atualizados com sucesso
        '400':
          description: Dados inválidos
        '404':
          description: Usuário não encontrado
        '500':
          description: Erro interno no servidor       
          
  /schedules:
    put:
      tags: 
        - Schedules
      summary: Atualiza os horários de funcionamento
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para atualizar os dados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [segunda, terca, quarta, quinta, sexta, sabado, domingo]
                        description: Dia da semana (em inglês)
                      timeRanges:
                        type: array
                        items:
                          type: object
                          properties:
                            start:
                              type: string
                              format: time
                              pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
                              example: "08:00"
                              description: Horário de abertura no formato HH:MM (24h)
                            end:
                              type: string
                              format: time
                              pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
                              example: "18:00"
                              description: Horário de fechamento no formato HH:MM (24h)
                          required: [start, end]
                    required: [day, timeRanges]
              example:
                schedule:
                  - day: segunda
                    timeRanges:
                      - start: "08:00"
                        end: "12:00"
                      - start: "13:00"
                        end: "18:00"
                  - day: terca
                    timeRanges:
                      - start: "09:00"
                        end: "18:00"
      responses:
        '200':
          description: Horários atualizados com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Horários atualizados com sucesso"
        '400':
          description: Erro de validação
        '401':
          description: Token inválido ou não fornecido
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor

  /categories/{id}:
    get:
      tags: 
        - Categories
      summary: Lista as minhas categorias do menu
      description: Requer um parâmetro que é o id da loja a ser buscada.
      parameters:
        - name: id
          in: path
          type: integer
          description: Id da loja
      responses:
        '200':
          description: Retorna as minhas categorias
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor

  /my-categories:
    get:
      tags:
        - Categories
      summary: Lista as minhas categorias do menu
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para buscar os dados.
      responses:
        '200':
          description: Retorna as minhas categorias
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor

      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para buscar os dados.
      responses:
        '200':
          description: Retorna as minhas categorias
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor

  /categories:
    post:
      tags: 
        - Categories
      summary: Cria uma nova categoria no menu
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Bebidas"
      responses:
        '201':
          description: Categoria criada
        '400':
          description: Nome da categoria não inserido
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor
          
  /categories/{id}:
    put:
      tags: 
        - Categories
      summary: Renomeia a categoria
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
          description: Id da categoria a ser renomeada
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  example: "Bebidas"
      responses:
        '200':
          description: Categoria renomeada
        '400':
          description: Nome da categoria não inserido
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor

    delete:
      tags: 
        - Categories
      summary: Deleta a categoria
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
          description: Id da categoria a ser deletada
      responses:
        '200':
          description: Categoria deletada com sucesso
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja/categoria não encontrada
        '500':
          description: Erro interno no servidor

  /categories/{id}/toggle-status:
    patch:
      tags: 
        - Categories
      summary: Alterna status da categoria (ativado/desativado)
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
          description: Id da categoria a ser alterada
      responses:
        '200':
          description: Status da categoria alternado com sucesso
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja/categoria não encontrada
        '500':
          description: Erro interno no servidor

  /menu-items/{storeId}/{categoryId}:
    get:
      tags:
        - Menu Items
      summary: Lista os itens do menu de uma categoria
      security:
        - bearerAuth: []
      description: Retorna todos os itens do menu pertencentes à categoria informada.
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
          description: Id da loja para buscar os itens
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: Id da categoria para buscar os itens
      responses:
        '200':
          description: Lista de itens retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Prato do dia"
                        description:
                          type: string
                          example: "Arroz, feijão e bife"
                        price:
                          type: number
                          example: 30.5
                        isAvailable:
                          type: boolean
                          example: true
                        optionsGroups:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              title:
                                type: string
                              required:
                                type: boolean
                              options:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                    name:
                                      type: string
                                    additionalPrice:
                                      type: number
        '400':
          description: ID da categoria inválido
        '401':
          description: Usuário não autenticado
        '403':
          description: Categoria não pertence à loja
        '404':
          description: Loja não encontrada
        '500':
          description: Erro interno no servidor

  /menu-items/{categoryId}:
    post:
      tags: 
        - Menu Items
      summary: Cria um item no menu
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: number
          description: Id da categoria onde o o item vai ficar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Prato do dia"
                  description: Nome do item do menu
                description:
                  type: string
                  example: "Pra de arroz e feijão"
                  description: Descrição detalhada do item
                price:
                  type: number
                  format: float
                  example: 30.50
                  description: Preço base do item
                optionGroups:
                  type: array
                  description: Grupos de opções personalizáveis
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Adicionais"
                        description: Nome do grupo de opções
                      required:
                        type: boolean
                        example: false
                        description: Se a escolha de pelo menos uma opção é obrigatória
                      options:
                        type: array
                        description: Lista de opções disponíveis
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "Queijo extra"
                              description: Nome da opção
                            additionalPrice:
                              type: number
                              format: float
                              example: 5.00
                              description: Valor adicional quando esta opção é selecionada
                          required: [name, additionalPrice]
                    required: [title, required, options]
              required: [name, description, price, categoryId]
      responses:
        '200':
          description: Item criado com sucesso
        '400':
          description: Dados obrigatórios ausentes
        '401':
          description: Erro na validação do usuário
        '404':
          description: Loja/categoria não encontrada
        '500':
          description: Erro interno no servidor

  /menu-items/{categoryId}/{itemId}:
    put:
      tags: 
        - Menu Items
      summary: Atualiza as informações do item
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
          description: ID da categoria do item
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: ID do item do menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                  minLength: 1
                  example: "Prato atualizado"
                description:
                  type: string
                  nullable: true
                  example: "Nova descrição do prato"
                price:
                  type: number
                  format: float
                  minimum: 0.01
                  nullable: true
                  example: 35.90
              additionalProperties: false
      responses:
        '200':
          description: Item atualizado com sucesso
        '400':
          description: Erro na validação
        '401':
          description: Usuário não autenticado
        '403':
          description: Categoria não pertence à loja
        '404':
          description: Item não encontrado ou não pertence à loja
        '500':
          description: Erro interno no servidor
  
  /menu-items/{categoryId}/{itemId}/toggle-status:
    patch:
      tags: 
        - Menu Items
      summary: Alterna o status do item (disponpivel/indisponível)
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
          description: ID da categoria do item
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: ID do item do menu
      responses:
        '200':
          description: Item atualizado com sucesso
        '400':
          description: Erro na validação do item
        '401':
          description: Usuário não autenticado
        '404':
          description: Item não encontrado ou não pertence à loja
        '500':
          description: Erro interno no servidor
          
  /menu-Items/{itemId}:
    delete:
      tags: 
        - Menu Items
      summary: Remove permanentemente um item do menu
      description: |
        Requer autenticação via JWT (armazenado em cookie).
        Apenas o dono da loja pode deletar itens vinculados às suas categorias.
      security:
        - bearerAuth: []  # Corrigido para refletir autenticação por cookie
      parameters:
        - name: itemId  # Adicionado o hífen para indicar item de lista
          in: path
          required: true
          schema:
            type: integer
            minimum: 1  # Validação adicional
          description: ID numérico do item a ser removido
      responses:
        '200':
          description: Item removido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Item deletado com sucesso"
        '400':
          description: ID inválido ou formato incorreto
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "ID do item inválido"
        '401':
          description: Token JWT inválido ou não fornecido
        '403':
          description: Item não pertence à loja do usuário
        '404':
          description: Loja ou item não encontrado
        '500':
          description: Erro interno do servidor

  /order:
    post:
      tags: 
        - Orders
      summary: Cria um novo pedido
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie para bsucar os dados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                  example: "Fulano de Tal"
                  description: Nome do cliente
                customerPhone:
                  type: string
                  example: "(51) 99999-9999"
                  description: Celular do cliente
                typeOfDelivery:
                  type: string
                  example: "delivery"
                  description: Tipo de entrega (delivery/pickup)
                address:
                  type: string
                  example: Rua A, 295
                  description: Endereço do cliente
                paymentMethod:
                  type: string
                  example: pix
                  description: Tipo de pagamento (dinheiro, cartão ou pix)
                items: 
                  type: array
                  items:
                    type: object
                    properties:
                      menuItemId: 
                        type: number
                        description: Número do id do item
                      note: 
                        type: string
                        example: Sem Queijo
                        description: Observações do usuário para o pedido
                      optionIds:
                        type: array
                        items:
                          type: number
      responses:
        '201':
          description: Pedido criado com sucesso
        '404':
          description: Item do menu não encontrado ou sem preço
        '422':
          description: Erro de validação
        '500':
          description: Erro interno do servidor

  /order/list:
    get:
      tags:
        - Orders
      summary: Lista pedidos com filtros
      description: |
        Retorna uma lista paginada de pedidos com possíveis filtros por:
        - Período (data inicial e final)
        - Status do pedido
        Requer autenticação via JWT (cookie ou bearer token)
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Data inicial no formato ISO (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2023-01-01"
        - name: endDate
          in: query
          description: Data final no formato ISO (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2023-12-31"
        - name: status
          in: query
          description: Status do pedido para filtrar
          required: false
          schema:
            type: string
            enum:
              - "aguardando_aprovacao"
              - "em_preparo"
              - "pronto_para_retirada"
              - "a_caminho"
              - "cancelado"
            example: "a_caminho"
        - name: limit
          in: query
          description: Limite de resultados por página (padrão 300)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 300
            example: 50
        - name: offset
          in: query
          description: Número de registros para pular (paginação)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
      responses:
        '200':
          description: Lista de pedidos retornada com sucesso
        '400':
          description: Parâmetros de filtro inválidos
        '401':
          description: Não autenticado
        '500':
          description: Erro interno no servidor

  /order/{orderId}/details:
    get:
      tags:
        - Orders
      summary: Obter detalhes de um pedido específico
      description: |
        Retorna os detalhes completos de um pedido específico, incluindo todos os itens.
        Requer autenticação via JWT (cookie ou bearer token) e que o pedido pertença à loja do usuário.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID numérico do pedido
          schema:
            type: integer
            minimum: 1
            example: 123
      responses:
        '200':
          description: Detalhes do pedido retornados com sucesso
        '400':
          description: ID do pedido inválido
        '401':
          description: Não autenticado ou token inválido
        '403':
          description: Pedido não pertence à loja do usuário
        '404':
          description: Pedido não encontrado
        '500':
          description: Erro interno no servidor

  /order/{orderId}/accept:
    patch:
      tags:
        - Orders
      summary: Aceitar um pedido (mudar status para "em_preparo")
      description: |
        Atualiza o status de um pedido para "em_preparo".
        Requer autenticação via JWT e que o pedido pertença à loja do usuário.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID numérico do pedido a ser aceito
          schema:
            type: integer
            minimum: 1
            example: 123
      responses:
        '200':
          description: Pedido aceito com sucesso
        '400':
          description: ID do pedido inválido
        '401':
          description: Não autenticado ou token inválido
        '403':
          description: Pedido não pertence à loja do usuário
        '404':
          description: Pedido ou loja não encontrada
        '500':
          description: Erro interno no servidor

  /order/{orderId}/cancel:
    patch:
      tags:
        - Orders
      summary: Cancelar um pedido
      description: |
        Atualiza o status de um pedido para "cancelado".
        Requer autenticação via JWT e que o pedido pertença à loja do usuário.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID numérico do pedido a ser cancelado
          schema:
            type: integer
            minimum: 1
            example: 123
      responses:
        '200':
          description: Pedido cancelado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pedido cancelado com sucesso"
        '400':
          description: ID do pedido inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ID do pedido inválido"
        '401':
          description: Não autenticado ou token inválido
        '403':
          description: Pedido não pertence à loja do usuário
        '404':
          description: Pedido ou loja não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pedido não encontrado"
        '500':
          description: Erro interno no servidor

  /order/{orderId}/ready:
    patch:
      tags:
        - Orders
      summary: Marcar pedido como pronto
      description: |
        Atualiza o status do pedido para:
        - "a_caminho" (se deliveryType = 'delivery')
        - "pronto_para_retirada" (se deliveryType = 'pickup')
        Requer autenticação via JWT e que o pedido pertença à loja do usuário.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID numérico do pedido
          schema:
            type: integer
            minimum: 1
            example: 123
      responses:
        '200':
          description: Status do pedido atualizado com sucesso
        '400':
          description: |
            Possíveis erros:
            - ID do pedido inválido
            - Tipo de entrega inválido
        '401':
          description: Não autenticado ou token inválido
        '403':
          description: Pedido não pertence à loja do usuário
        '404':
          description: Pedido ou loja não encontrada
        '500':
          description: Erro interno no servidor

  /order/{orderId}/delivered:
    patch:
      tags:
        - Orders
      summary: Marcar pedido como entregue
      description: |
        Atualiza o status do pedido para "entregue".
        Requer autenticação via JWT e que:
        1. O pedido pertença à loja do usuário
        2. O pedido esteja no status "a_caminho"
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID numérico do pedido
          schema:
            type: integer
            minimum: 1
            example: 123
      responses:
        '200':
          description: Pedido marcado como entregue com sucesso
        '400':
          description: ID do pedido inválido
        '401':
          description: Não autenticado ou token inválido
        '403':
          description: |
            Possíveis erros:
            - Pedido não pertence à loja do usuário
            - Pedido não está no status "a_caminho"
        '404':
          description: Pedido ou loja não encontrada
        '500':
          description: Erro interno no servidor

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Autenticação via token JWT obtido no login.
        Pode ser enviado como:
        - Header: Authorization: Bearer <token>
        - Cookie: token=<token>
  
  schemas:
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        menuItemId:
          type: integer
          example: 11
        quantity:
          type: integer
          example: 1
        unitPrice:
          type: number
          format: float
          example: 29.95
        note:
          type: string
          nullable: true
          example: "Sem cebola"
        options:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemOption'
      required:
        - id
        - menuItemId
        - quantity
        - unitPrice

    OrderItemOption:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: "Queijo extra"
        additionalPrice:
          type: number
          format: float
          example: 5.00
      required:
        - id
        - name
        - additionalPrice