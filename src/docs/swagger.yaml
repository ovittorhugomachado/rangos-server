openapi: 3.0.0
info:
  title: Rangos API
  version: 1.0.0
  description: API REST para gestão de pedidos e cardápios de restaurantes.
  contact:
    email: ovitorhugoalvesmachado@gmail.com.br
  license:
    name: Vitor Hugo Alves Machado

servers:
  - url: http://localhost:3000
    description: Local development

tags:
  - name: Auth
  - name: Password

paths:

  /signup:
    post:
      tags:
        - Auth
      summary: Criar conta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantName:
                  type: string
                  example: "Meu Restaurante"
                cnpj:
                  type: string
                  example: "12.345.678/0001-99"
                  description: CNPJ no formato XX.XXX.XXX/XXXX-XX
                ownersName:
                  type: string
                  example: "Fulano da Silva"
                cpf:
                  type: string
                  example: "123.456.789-09"
                  description: CPF no formato XXX.XXX.XXX-XX
                phoneNumber: 
                  type: string
                  example: "(51) 98765-4321"
                  description: Telefone com DDD
                email:
                  type: string
                  format: email
                  example: "contato@meurestaurante.com.br"
                password:
                  type: string
                  example: senhaForte123
                  description: >
                    A senha deve ter entre 8 e 72 caracteres, conter pelo menos uma letra maiúscula e um número.
              required: [email, password, restaurantName, ownersName, cpf, phoneNumber]
      responses:
        '201':
          description: Usuário criado com sucesso
        '409':
          description: Email já cadastrado
        '422':
          description: Erro de validação de campos
        '500':
          description: Erro interno no servidor

  /login:
    post:
      tags:
        - Auth
      summary: Entrar na conta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "contato@meurestaurante.com.br"
                password:
                  type: string
                  example: senhaForte123
              required: [email, password]
      responses:
        '200':
          description: Login realizado com sucesso
          headers:
            Set-Cookie:
              description: Cookies de autenticação definidos (token e refreshToken)
              schema:
                type: string
              example: token=abc123; Path=/; HttpOnly; Max-Age=900
        '400':
          description: Erro de validação de campos
        '401':
          description: Credenciais inválidas
        '500':
          description: Erro interno no servidor

  /refresh-token:
    post:
      tags:
        - Auth
      summary: Atualizar token de acesso
      description: >
        Essa rota exige o cookie `refreshToken` presente na requisição. Ela retorna um novo access token no cookie `token`.
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
          description: Token de atualização armazenado em cookie.
      responses:
        '200':
          description: Token renovado com sucesso
        '401':
          description: Token de atualização ausente ou inválido
        '500':
          description: Erro interno no servidor

  /logout:
    post:
      tags:
        - Auth
      summary: Sair da conta
      security:
        - bearerAuth: []
      description: Requer um access token válido no cookie ou header para remover sessão.
      responses:
        '200':
          description: Logout efetuado com sucesso
        '401':
          description: Usuário não autenticado
        '500':
          description: Erro interno no servidor

  /recover-password: 
    post: 
      tags:
        - Password
      summary: Enviar link de alteração de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Link enviado com sucesso
        '404':
          description: Usuário não encontrado
          
  /create-new-password/{token}:
    patch:
      tags:
        - Password
      summary: Criar nova senha
      description: >
        Cria uma nova senha usando um token de redefinição válido.
        O token é geralmente enviado por email após solicitação de redefinição.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token de redefinição de senha (JWT ou token único)
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 72
                  example: novaSenhaSegura123
                  description: >
                    A senha deve ter entre 8 e 72 caracteres, conter pelo menos uma letra maiúscula e um número.           
      responses:
        '200':
          description: Senha redefinida com sucesso
        '404':
          description: Token inválido ou expirado
        '422':
          description: Senha fraca
        '500':
          description: Erro interno no servidor  

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Autenticação via token JWT obtido no login.
        Pode ser enviado como:
        - Header: Authorization: Bearer <token>
        - Cookie: token=<token>
